{"ast":null,"code":"var _jsxFileName = \"/home/denner/Documentos/WebDevelopment/trybe-projects/project-recipes-app/sd-07-project-recipes-app/src/pages/RecipesInProgress.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport clipboardCopy from 'clipboard-copy';\nimport RecipesContext from '../context/RecipesContext';\nimport * as foodApiFunctions from '../services/foodApiFunctions';\nimport * as drinkApiFunctions from '../services/drinkApiFunctions';\nimport shareIcon from \"../images/shareIcon.svg\";\nimport blackHearthIcon from \"../images/blackHeartIcon.svg\";\nimport whiteHearthIcon from \"../images/whiteHeartIcon.svg\";\n\nfunction RecipesInProgress() {\n  // useParams, learned in https://medium.com/better-programming/using-url-parameters-and-query-strings-with-react-router-fffdcea7a8e9\n  const {\n    id,\n    type\n  } = useParams();\n  const [foodObject, setFoodObject] = useState({});\n  const [drinkObject, setDrinkObject] = useState({});\n  useEffect(() => {\n    if (type === 'comidas') {\n      foodApiFunctions.fetchFoodDetailById(id).then(response => setFoodObject(...response.meals));\n    } else {\n      drinkApiFunctions.fetchDrinkDetailById(id).then(response => setDrinkObject(...response.drinks));\n    }\n  }, [id, type]);\n  console.log(foodObject);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, \"O principio do fim\");\n}\n\nexport default RecipesInProgress;","map":{"version":3,"sources":["/home/denner/Documentos/WebDevelopment/trybe-projects/project-recipes-app/sd-07-project-recipes-app/src/pages/RecipesInProgress.js"],"names":["React","useContext","useEffect","useState","useParams","clipboardCopy","RecipesContext","foodApiFunctions","drinkApiFunctions","RecipesInProgress","id","type","foodObject","setFoodObject","drinkObject","setDrinkObject","fetchFoodDetailById","then","response","meals","fetchDrinkDetailById","drinks","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAO,KAAKC,gBAAZ,MAAkC,8BAAlC;AACA,OAAO,KAAKC,iBAAZ,MAAmC,+BAAnC;;;;;AAKA,SAASC,iBAAT,GAA6B;AAC3B;AACA,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAeP,SAAS,EAA9B;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,IAAI,KAAK,SAAb,EAAwB;AACtBJ,MAAAA,gBAAgB,CACbS,mBADH,CACuBN,EADvB,EAEGO,IAFH,CAESC,QAAD,IAAcL,aAAa,CAAC,GAAGK,QAAQ,CAACC,KAAb,CAFnC;AAGD,KAJD,MAIO;AACLX,MAAAA,iBAAiB,CACdY,oBADH,CACwBV,EADxB,EAEGO,IAFH,CAESC,QAAD,IAAcH,cAAc,CAAC,GAAGG,QAAQ,CAACG,MAAb,CAFpC;AAGD;AACF,GAVQ,EAUN,CAACX,EAAD,EAAKC,IAAL,CAVM,CAAT;AAYAW,EAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;AACA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF;AAGD;;AAED,eAAeH,iBAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport clipboardCopy from 'clipboard-copy';\nimport RecipesContext from '../context/RecipesContext';\nimport * as foodApiFunctions from '../services/foodApiFunctions';\nimport * as drinkApiFunctions from '../services/drinkApiFunctions';\nimport shareIcon from '../images/shareIcon.svg';\nimport blackHearthIcon from '../images/blackHeartIcon.svg';\nimport whiteHearthIcon from '../images/whiteHeartIcon.svg';\n\nfunction RecipesInProgress() {\n  // useParams, learned in https://medium.com/better-programming/using-url-parameters-and-query-strings-with-react-router-fffdcea7a8e9\n  const { id, type } = useParams();\n  const [foodObject, setFoodObject] = useState({});\n  const [drinkObject, setDrinkObject] = useState({});\n  useEffect(() => {\n    if (type === 'comidas') {\n      foodApiFunctions\n        .fetchFoodDetailById(id)\n        .then((response) => setFoodObject(...response.meals));\n    } else {\n      drinkApiFunctions\n        .fetchDrinkDetailById(id)\n        .then((response) => setDrinkObject(...response.drinks));\n    }\n  }, [id, type]);\n\n  console.log(foodObject);\n  return (\n    <div>O principio do fim</div>\n  );\n}\n\nexport default RecipesInProgress;\n"]},"metadata":{},"sourceType":"module"}