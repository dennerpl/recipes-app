{"ast":null,"code":"var _jsxFileName = \"/home/denner/Documentos/WebDevelopment/trybe-projects/project-recipes-app/sd-07-project-recipes-app/src/pages/RecipesDetails.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clipboardCopy from 'clipboard-copy';\nimport RecipesContext from '../context/RecipesContext';\nimport './recipedetails.css';\nimport { fetchFoodDetailById } from '../services/foodApiFunctions';\nimport { fetchAllDrinkRecipes } from '../services/drinkApiFunctions';\nimport shareIcon from \"../images/shareIcon.svg\";\nimport blackHearthIcon from \"../images/blackHeartIcon.svg\";\nimport whiteHearthIcon from \"../images/whiteHeartIcon.svg\";\nimport './recipes.css';\n\nfunction RecipesDetails(props) {\n  const [ingredients, setIngredients] = useState([]);\n  const [recomended, setRecomendedDrinks] = useState([]);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [clipboard, setClipboard] = useState('');\n  const {\n    foodDetail,\n    setFoodDetail,\n    setId,\n    id\n  } = useContext(RecipesContext);\n  const zero = 0;\n  const six = 6;\n  const fifty = 50;\n\n  const handlerFavorite = () => {\n    const favoriteRec = {\n      id,\n      type: 'comida',\n      area: 'Italian',\n      category: foodDetail.strCategory,\n      alcoholicOrNot: '',\n      name: foodDetail.strMeal,\n      image: foodDetail.strMealThumb\n    };\n    localStorage.setItem('favoriteRecipes', JSON.stringify([favoriteRec]));\n    localStorage.setItem('favorites', JSON.stringify(id));\n    setIsFavorite(true);\n  };\n\n  const copyClipboard = async () => {\n    const urlarray = window.location.href.split('/');\n    const url = `${urlarray[0]}//${urlarray[2]}/comidas/${id}`;\n    await clipboardCopy(url);\n    setClipboard({\n      mensagem: 'Link copiado!'\n    });\n  };\n\n  const recomendedDrink = async () => {\n    const allDrinks = await fetchAllDrinkRecipes();\n    const sixDrinks = allDrinks.drinks.slice(zero, six);\n    console.log(sixDrinks);\n    setRecomendedDrinks(sixDrinks);\n  };\n\n  useEffect(() => {\n    recomendedDrink();\n    const {\n      match\n    } = props;\n    const idRandom = match.params.id;\n    setId(idRandom);\n    fetchFoodDetailById(idRandom).then(response => setFoodDetail(response.meals[0]));\n  }, [props, setFoodDetail, setId]);\n  useEffect(() => {\n    const allIngredients = [];\n\n    for (let i = zero; i <= fifty; i += 1) {\n      if (foodDetail[`strIngredient${i}`]) {\n        allIngredients.push({\n          nomeIngrediente: foodDetail[`strIngredient${i}`],\n          medida: foodDetail[`strMeasure${i}`]\n        });\n      }\n    }\n\n    setIngredients(allIngredients);\n  }, [foodDetail]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main_recipe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, console.log('Console do Food Detail', foodDetail), /*#__PURE__*/React.createElement(\"img\", {\n    \"data-testid\": \"recipe-photo\",\n    alt: \"Imagem da comida\",\n    src: foodDetail.strMealThumb,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"recipe-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, foodDetail.strMeal), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"image\",\n    \"data-testid\": \"share-btn\",\n    src: shareIcon,\n    alt: \"compartilhar\",\n    onClick: copyClipboard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), clipboard.mensagem, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handlerFavorite,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    \"data-testid\": \"favorite-btn\",\n    src: isFavorite ? blackHearthIcon : whiteHearthIcon,\n    alt: \"Icone Favoritar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"recipe-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, foodDetail.strCategory), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Ingredientes\", ingredients.map((item, index) => /*#__PURE__*/React.createElement(\"span\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": `${index}-ingredient-name-and-measure`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, `${item.nomeIngrediente} ${item.medida}`)))), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, foodDetail.strInstructions), /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"video\",\n    src: foodDetail.strYoutube,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main_carrousel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, \"Receitas recomendadas\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"carrousel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, recomended.map((item, index) => /*#__PURE__*/React.createElement(\"span\", {\n    \"data-testid\": `${index}-recomendation-card`,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"recomendadas\",\n    src: item.strDrinkThumb,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 19\n    }\n  }))))), /*#__PURE__*/React.createElement(Link, {\n    to: `/comidas/${id}/in-progress`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"iniciarReceita\",\n    type: \"button\",\n    \"data-testid\": \"start-recipe-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, \"Iniciar receita\")));\n}\n\nRecipesDetails.propTypes = {\n  match: PropTypes.string.isRequired,\n  params: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired\n};\nexport default RecipesDetails;","map":{"version":3,"sources":["/home/denner/Documentos/WebDevelopment/trybe-projects/project-recipes-app/sd-07-project-recipes-app/src/pages/RecipesDetails.js"],"names":["React","useContext","useEffect","useState","Link","PropTypes","clipboardCopy","RecipesContext","fetchFoodDetailById","fetchAllDrinkRecipes","RecipesDetails","props","ingredients","setIngredients","recomended","setRecomendedDrinks","isFavorite","setIsFavorite","clipboard","setClipboard","foodDetail","setFoodDetail","setId","id","zero","six","fifty","handlerFavorite","favoriteRec","type","area","category","strCategory","alcoholicOrNot","name","strMeal","image","strMealThumb","localStorage","setItem","JSON","stringify","copyClipboard","urlarray","window","location","href","split","url","mensagem","recomendedDrink","allDrinks","sixDrinks","drinks","slice","console","log","match","idRandom","params","then","response","meals","allIngredients","i","push","nomeIngrediente","medida","shareIcon","blackHearthIcon","whiteHearthIcon","map","item","index","strInstructions","strYoutube","strDrinkThumb","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAO,qBAAP;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,oBAAT,QAAqC,+BAArC;;;;AAIA,OAAO,eAAP;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACW,UAAD,EAAaC,mBAAb,IAAoCZ,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAM;AACJiB,IAAAA,UADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA;AAJI,MAKFtB,UAAU,CAACM,cAAD,CALd;AAOA,QAAMiB,IAAI,GAAG,CAAb;AACA,QAAMC,GAAG,GAAG,CAAZ;AACA,QAAMC,KAAK,GAAG,EAAd;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC5B,UAAMC,WAAW,GAAG;AAClBL,MAAAA,EADkB;AAElBM,MAAAA,IAAI,EAAE,QAFY;AAGlBC,MAAAA,IAAI,EAAE,SAHY;AAIlBC,MAAAA,QAAQ,EAAEX,UAAU,CAACY,WAJH;AAKlBC,MAAAA,cAAc,EAAE,EALE;AAMlBC,MAAAA,IAAI,EAAEd,UAAU,CAACe,OANC;AAOlBC,MAAAA,KAAK,EAAEhB,UAAU,CAACiB;AAPA,KAApB;AASAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAe,CAACb,WAAD,CAAf,CAAxC;AACAU,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAelB,EAAf,CAAlC;AACAN,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAbD;;AAeA,QAAMyB,aAAa,GAAG,YAAY;AAChC,UAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,CAAjB;AACA,UAAMC,GAAG,GAAI,GAAEL,QAAQ,CAAC,CAAD,CAAI,KAAIA,QAAQ,CAAC,CAAD,CAAI,YAAWpB,EAAG,EAAzD;AACA,UAAMjB,aAAa,CAAC0C,GAAD,CAAnB;AACA7B,IAAAA,YAAY,CAAC;AAAE8B,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAAZ;AACD,GALD;;AAOA,QAAMC,eAAe,GAAG,YAAY;AAClC,UAAMC,SAAS,GAAG,MAAM1C,oBAAoB,EAA5C;AACA,UAAM2C,SAAS,GAAGD,SAAS,CAACE,MAAV,CAAiBC,KAAjB,CAAuB9B,IAAvB,EAA6BC,GAA7B,CAAlB;AACA8B,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACArC,IAAAA,mBAAmB,CAACqC,SAAD,CAAnB;AACD,GALD;;AAOAlD,EAAAA,SAAS,CAAC,MAAM;AACdgD,IAAAA,eAAe;AACf,UAAM;AAAEO,MAAAA;AAAF,QAAY9C,KAAlB;AACA,UAAM+C,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAapC,EAA9B;AACAD,IAAAA,KAAK,CAACoC,QAAD,CAAL;AACAlD,IAAAA,mBAAmB,CAACkD,QAAD,CAAnB,CACGE,IADH,CACSC,QAAD,IAAcxC,aAAa,CAACwC,QAAQ,CAACC,KAAT,CAAe,CAAf,CAAD,CADnC;AAED,GAPQ,EAON,CAACnD,KAAD,EAAQU,aAAR,EAAuBC,KAAvB,CAPM,CAAT;AASApB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6D,cAAc,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAC,GAAGxC,IAAb,EAAmBwC,CAAC,IAAItC,KAAxB,EAA+BsC,CAAC,IAAI,CAApC,EAAuC;AACrC,UAAI5C,UAAU,CAAE,gBAAe4C,CAAE,EAAnB,CAAd,EAAqC;AACnCD,QAAAA,cAAc,CAACE,IAAf,CACE;AAAEC,UAAAA,eAAe,EAAE9C,UAAU,CAAE,gBAAe4C,CAAE,EAAnB,CAA7B;AACEG,UAAAA,MAAM,EAAE/C,UAAU,CAAE,aAAY4C,CAAE,EAAhB;AADpB,SADF;AAID;AACF;;AACDnD,IAAAA,cAAc,CAACkD,cAAD,CAAd;AACD,GAXQ,EAWN,CAAC3C,UAAD,CAXM,CAAT;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGmC,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCpC,UAAtC,CADH,eAEE;AACE,mBAAY,cADd;AAEE,IAAA,GAAG,EAAC,kBAFN;AAGE,IAAA,GAAG,EAAGA,UAAU,CAACiB,YAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAOE;AACE,mBAAY,cADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGjB,UAAU,CAACe,OAHd,CAPF,eAYE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,mBAAY,WAFd;AAGE,IAAA,GAAG,EAAGiC,SAHR;AAIE,IAAA,GAAG,EAAC,cAJN;AAKE,IAAA,OAAO,EAAG1B,aALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAmBGxB,SAAS,CAAC+B,QAnBb,eAoBE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAGtB,eAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AACE,mBAAY,cADd;AAEE,IAAA,GAAG,EAAGX,UAAU,GAAGqD,eAAH,GAAqBC,eAFvC;AAGE,IAAA,GAAG,EAAC,iBAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CApBF,eA8BE;AACE,mBAAY,iBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGlD,UAAU,CAACY,WAHd,CA9BF,eAmCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGIpB,WAAW,CAAC2D,GAAZ,CACE,CAACC,IAAD,EAAOC,KAAP,kBACE;AACE,IAAA,GAAG,EAAGA,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE;AACE,mBAAe,GAAEA,KAAM,8BADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGK,GAAED,IAAI,CAACN,eAAgB,IAAGM,IAAI,CAACL,MAAO,EAH3C,CAHF,CAFJ,CAHJ,CAnCF,eAqDE;AACE,mBAAY,cADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGG/C,UAAU,CAACsD,eAHd,CArDF,eA0DE;AACE,mBAAY,OADd;AAEE,IAAA,GAAG,EAAGtD,UAAU,CAACuD,UAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1DF,eA8DE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI7D,UAAU,CAACyD,GAAX,CACE,CAACC,IAAD,EAAOC,KAAP,kBACE;AACE,mBAAe,GAAEA,KAAM,qBADzB;AAEE,IAAA,GAAG,EAAGA,KAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AAAK,IAAA,GAAG,EAAC,cAAT;AAAwB,IAAA,GAAG,EAAGD,IAAI,CAACI,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAFJ,CAFJ,CAFF,CA9DF,eA+EE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAI,YAAWrD,EAAG,cAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,gBADZ;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,mBAAY,kBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,CA/EF,CADF;AA2FD;;AAEDb,cAAc,CAACmE,SAAf,GAA2B;AACzBpB,EAAAA,KAAK,EAAEpD,SAAS,CAACyE,MAAV,CAAiBC,UADC;AAEzBpB,EAAAA,MAAM,EAAEtD,SAAS,CAACyE,MAAV,CAAiBC,UAFA;AAGzBxD,EAAAA,EAAE,EAAElB,SAAS,CAACyE,MAAV,CAAiBC;AAHI,CAA3B;AAMA,eAAerE,cAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clipboardCopy from 'clipboard-copy';\nimport RecipesContext from '../context/RecipesContext';\nimport './recipedetails.css';\nimport { fetchFoodDetailById } from '../services/foodApiFunctions';\nimport { fetchAllDrinkRecipes } from '../services/drinkApiFunctions';\nimport shareIcon from '../images/shareIcon.svg';\nimport blackHearthIcon from '../images/blackHeartIcon.svg';\nimport whiteHearthIcon from '../images/whiteHeartIcon.svg';\nimport './recipes.css';\n\nfunction RecipesDetails(props) {\n  const [ingredients, setIngredients] = useState([]);\n  const [recomended, setRecomendedDrinks] = useState([]);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [clipboard, setClipboard] = useState('');\n\n  const {\n    foodDetail,\n    setFoodDetail,\n    setId,\n    id,\n  } = useContext(RecipesContext);\n\n  const zero = 0;\n  const six = 6;\n  const fifty = 50;\n\n  const handlerFavorite = () => {\n    const favoriteRec = {\n      id,\n      type: 'comida',\n      area: 'Italian',\n      category: foodDetail.strCategory,\n      alcoholicOrNot: '',\n      name: foodDetail.strMeal,\n      image: foodDetail.strMealThumb,\n    };\n    localStorage.setItem('favoriteRecipes', JSON.stringify([favoriteRec]));\n    localStorage.setItem('favorites', JSON.stringify(id));\n    setIsFavorite(true);\n  };\n\n  const copyClipboard = async () => {\n    const urlarray = window.location.href.split('/');\n    const url = `${urlarray[0]}//${urlarray[2]}/comidas/${id}`;\n    await clipboardCopy(url);\n    setClipboard({ mensagem: 'Link copiado!' });\n  };\n\n  const recomendedDrink = async () => {\n    const allDrinks = await fetchAllDrinkRecipes();\n    const sixDrinks = allDrinks.drinks.slice(zero, six);\n    console.log(sixDrinks);\n    setRecomendedDrinks(sixDrinks);\n  };\n\n  useEffect(() => {\n    recomendedDrink();\n    const { match } = props;\n    const idRandom = match.params.id;\n    setId(idRandom);\n    fetchFoodDetailById(idRandom)\n      .then((response) => setFoodDetail(response.meals[0]));\n  }, [props, setFoodDetail, setId]);\n\n  useEffect(() => {\n    const allIngredients = [];\n    for (let i = zero; i <= fifty; i += 1) {\n      if (foodDetail[`strIngredient${i}`]) {\n        allIngredients.push(\n          { nomeIngrediente: foodDetail[`strIngredient${i}`],\n            medida: foodDetail[`strMeasure${i}`] },\n        );\n      }\n    }\n    setIngredients(allIngredients);\n  }, [foodDetail]);\n\n  return (\n    <div className=\"main_recipe\">\n      {console.log('Console do Food Detail', foodDetail)}\n      <img\n        data-testid=\"recipe-photo\"\n        alt=\"Imagem da comida\"\n        src={ foodDetail.strMealThumb }\n      />\n      <h2\n        data-testid=\"recipe-title\"\n      >\n        {foodDetail.strMeal}\n      </h2>\n      <input\n        type=\"image\"\n        data-testid=\"share-btn\"\n        src={ shareIcon }\n        alt=\"compartilhar\"\n        onClick={ copyClipboard }\n      />\n      {clipboard.mensagem}\n      <button\n        type=\"button\"\n        onClick={ handlerFavorite }\n      >\n        <img\n          data-testid=\"favorite-btn\"\n          src={ isFavorite ? blackHearthIcon : whiteHearthIcon }\n          alt=\"Icone Favoritar\"\n        />\n      </button>\n      <p\n        data-testid=\"recipe-category\"\n      >\n        {foodDetail.strCategory}\n      </p>\n      <div>\n        Ingredientes\n        {\n          ingredients.map(\n            (item, index) => (\n              <span\n                key={ index }\n              >\n                <p\n                  data-testid={ `${index}-ingredient-name-and-measure` }\n                >\n                  { `${item.nomeIngrediente} ${item.medida}` }\n                </p>\n              </span>\n            ),\n          )\n        }\n      </div>\n      <p\n        data-testid=\"instructions\"\n      >\n        {foodDetail.strInstructions}\n      </p>\n      <div\n        data-testid=\"video\"\n        src={ foodDetail.strYoutube }\n      />\n      <div className=\"main_carrousel\">\n        Receitas recomendadas\n        <div className=\"carrousel\">\n          {\n            recomended.map(\n              (item, index) => (\n                <span\n                  data-testid={ `${index}-recomendation-card` }\n                  key={ index }\n                >\n                  <img alt=\"recomendadas\" src={ item.strDrinkThumb } />\n                </span>\n              ),\n            )\n          }\n        </div>\n      </div>\n      <Link to={ `/comidas/${id}/in-progress` }>\n        <button\n          className=\"iniciarReceita\"\n          type=\"button\"\n          data-testid=\"start-recipe-btn\"\n        >\n          Iniciar receita\n        </button>\n      </Link>\n    </div>\n  );\n}\n\nRecipesDetails.propTypes = {\n  match: PropTypes.string.isRequired,\n  params: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default RecipesDetails;\n"]},"metadata":{},"sourceType":"module"}